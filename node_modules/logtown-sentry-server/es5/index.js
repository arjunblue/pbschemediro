'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Raven = require('raven');
var util = require('util');

/**
 * Logtown sentry wrapper for browser
 */

var Sentry = function () {

  /**
   * @param {string} url
   * @param {string} env
   */
  function Sentry(url) {
    var env = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : process.env.NODE_ENV;

    _classCallCheck(this, Sentry);

    this._client = new Raven.Client(url);

    this.env = env;

    // always catch global exceptions
    this._client.patchGlobal(function () {
      console.log('Uncaught exception, reported to Sentry, shutting down..');
      process.exit(1);
    });

    this._client.on('error', function (err) {
      console.error('Sentry error:', err.message);
    });
  }

  /**
   * @param {string} id
   * @param {{}} stats
   * @param {[]} rest
   */


  _createClass(Sentry, [{
    key: 'warn',
    value: function warn(id, stats) {
      for (var _len = arguments.length, rest = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        rest[_key - 2] = arguments[_key];
      }

      var opts = {
        extra: {
          source: 'backend',
          logger: id,
          environment: this.env,
          message: rest[0]
        },
        level: 'warn'
      };

      this.send('captureMessage', util.format.apply(util, rest), opts);
    }

    /**
     * @param {string} id
     * @param {{}} stats
     * @param {[]} rest
     */

  }, {
    key: 'error',
    value: function error(id, stats) {
      for (var _len2 = arguments.length, rest = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        rest[_key2 - 2] = arguments[_key2];
      }

      var err = rest.find(function (e) {
        return e instanceof Error;
      });
      if (!(err instanceof Error)) {
        this.warn.apply(this, [id, stats].concat(rest));
        return;
      }

      var opts = {
        extra: {
          source: 'backend',
          logger: id,
          environment: this.env,
          message: err + ''
        },
        level: 'error'
      };

      this.send('captureException', err, opts);
    }

    /**
     * @param {string} method
     * @param {string} msg
     * @param {{}} opts
     */

  }, {
    key: 'send',
    value: function send(method, msg, opts) {
      try {
        this._client[method](msg, opts, this.callback.bind(this));
      } catch (e) {
        console.error(e);
      }
    }

    /**
     * @param {string} result
     */

  }, {
    key: 'callback',
    value: function callback(result) {
      if (this._client && this._client.getIdent) {
        console.info('Sentry result: ' + this._client.getIdent(result));
      }
    }
  }]);

  return Sentry;
}();

module.export = Sentry;
